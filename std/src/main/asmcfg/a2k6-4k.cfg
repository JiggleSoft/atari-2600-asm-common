#==============================================================================
# Title:        Atari 2600 linker configuration file (4 KB ROM, 16 Byte Stack).
# Filename:     a2k6-4k.cfg
# Platform:     Atari 2600
# Language:     6507 Assembly Language (https://cc65.github.io/doc/ca65.html)
# Author:       Justin Lane (atari2600@jigglesoft.co.uk)
# Date:         2021-02-12 21:26
# Version:      2.0.6
#------------------------------------------------------------------------------
# Copyright (c) 2020 Justin Lane
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#------------------------------------------------------------------------------
# Linker config file for targeting the Atari 2600 (4KByte ROM, 16 Byte Stack).
#
# Sourced from: https://github.com/cc65/wiki/wiki/Atari-2600
# Content on this wiki is licensed under the following license:-
#     CC Attribution 3.0 Unported (http://creativecommons.org/licenses/by/3.0/)
#------------------------------------------------------------------------------
# Modified by Justin Lane (atari2600@jigglesoft.co.uk) 2018-12-13 20:04
#------------------------------------------------------------------------------
# Updated with https://github.com/cc65/cc65/blob/master/cfg/atari2600.cfg
#------------------------------------------------------------------------------

SYMBOLS {
    __STACKSIZE__: type = weak, value = $10; # 16 bytes system stack. 
}


MEMORY {
    RAM: start =   $80, size =   $80 - __STACKSIZE__, type = rw, define = yes;
    ROM: start = $F000, size = $1000,                 type = ro, define = yes, 
	     file = %O, fill = yes, fillval = $EA;
}


SEGMENTS {
    ZEROPAGE: load = RAM,            type = zp;
    STARTUP:  load = ROM,            type = ro,  optional = yes;
    CODE:     load = ROM,            type = ro,                  define = yes;
    RODATA:   load = ROM,            type = ro,  optional = yes, define = yes,
	          align = $100;
    DATA:     load = ROM, run = RAM, type = rw,  optional = yes, define = yes;
    BSS:      load = RAM,            type = bss, optional = yes, define = yes;
    VECTORS:  load = ROM,            type = ro,
              start = $FFFA;
}

#------------------------------------------------------------------------------
